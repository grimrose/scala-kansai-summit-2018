version: "3.4"

services:

  identity:
    build:
      context: ./app/identity/http/target/docker/stage
    volumes:
      - "./credentials/:/credentials/:ro"
    ports:
      - 9001:9001
    networks:
      - nw-sandbox
    env_file:
      - .env
    environment:
      KATSUBUSHI_HOST: katsubushi
      KATSUBUSHI_PORT: 11212
    depends_on:
      - katsubushi
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: docker.scala.identity.{{.ID}}
        fluentd-async-connect: "true"
    command:
      - -Dopencensus-scala.trace.exporters.logging.enabled=false
      - -Dopencensus-scala.trace.exporters.zipkin.enabled=false
      - -Dopencensus-scala.trace.exporters.stackdriver.enabled=true

  katsubushi:
    image: katsubushi/katsubushi
    ports:
      - 11212:11212
    expose:
      - 11212
    networks:
      - nw-sandbox
    command: -redis redis://redis:6379/0
    depends_on:
      - redis
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: docker.katsubushi.{{.ID}}
        fluentd-async-connect: "true"

  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - nw-sandbox

  message:
    build:
      context: ./app/message/http/target/docker/stage
    volumes:
      - "./credentials/:/credentials/:ro"
    ports:
      - 9002:9002
      - 8082:8082
    networks:
      - nw-sandbox
    env_file:
      - .env
    environment:
      PGHOST: postgres
      PGPORT: 5432
      IDENTITY_HOST: nginx
      IDENTITY_PORT: 8080
      JAEGER_COLLECTOR_HOST: jaeger
    depends_on:
      - postgres
      - identity
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: docker.scala.message.{{.ID}}
        fluentd-async-connect: "true"
    command:
      - -Dopencensus-scala.trace.exporters.logging.enabled=false
      - -Dopencensus-scala.trace.exporters.zipkin.enabled=false
      - -Dopencensus-scala.trace.exporters.stackdriver.enabled=true

  flyway:
    build:
      context: ./docker/flyway
    volumes:
      - ./migration:/flyway/sql
    networks:
      - nw-sandbox
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      PGHOST: postgres
      PGPORT: 5432
      FLYWAY_URL: jdbc:postgresql://postgres:5432/sandbox
    command: migrate

  postgres:
    image: postgres:10
    ports:
      - 5432:5432
    expose:
      - 5432
    networks:
      - nw-sandbox
    volumes:
      - vol-pg-data:/var/lib/postgresql/data
    env_file:
      - .env

  nginx:
    image: opentracing/nginx-opentracing
    networks:
      - nw-sandbox
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/jaeger-config.json:/etc/jaeger-config.json
      - ./docker/nginx/zipkin-config.json:/etc/zipkin-config.json
    ports:
      - 8080:8080
    depends_on:
      - message
      - identity
      - jaeger
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: docker.nginx.{{.ID}}
        fluentd-async-connect: "true"

  jaeger:
    image: jaegertracing/all-in-one:1.8
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - nw-sandbox
    ports:
      - 5775:5775/udp # agent zipkin host:port for the UDP server
      - 6831:6831/udp # agent jaeger-compact host:port for the UDP server
      - 6832:6832/udp # agent jaeger-binary host:port for the UDP server
      - 5778:5778     # agent host:port of the http server
      - 16686:16686   # query The port for the query service
      - 14268:14268   # The http port for the collector service
      - 9411:9411     # The http port for the Zipkin collector service

  fluentd:
    build: ./docker/fluentd/
    volumes:
      - "./credentials/:/credentials/:ro"
    env_file:
      - .env
    environment:
      FLUENTD_CONF: fluent.conf
      FLUENTD_OPT: -v
      TZ: "Asia/Tokyo"
    ports:
      - 24224:24224
      - 24224:24224/udp
    networks:
      - nw-sandbox

volumes:
  vol-pg-data:
    driver: local

networks:
  nw-sandbox:
    driver: bridge
